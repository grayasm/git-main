********************************************************************************
               Chapter 2. Rapid Application Development
                          Using Qt
********************************************************************************

1.  Setup the environment
-------------------------
    It is important to locate the binaries path for qt5 (qmake, moc, uic)
    and add it to environment with:

    export PATH=/usr/lib64/qt5/bin:$PATH

2.  Setup the project
---------------------
    qmake -project -o addressbook.pro

3.  Work on the source code
---------------------------
    qtcreator addressbook.pro

    To add a new dialog switch to Projects view, select addressbook[master]
    right button -> Add new -> Qt | Qt Designer Form Class,
    -> Dialog with Buttons Bottom -> Choose a Class Name | EditDialog
    -> Add to project and source control.

    For one dialog 'ListDialog' qtcreator will create 3 new files:
    listdialog.h listdialog.cpp listdialog.ui

    Do not jump to next step (4) until all .ui files have content, because
    Qt uic tool will error out.


4.  Compile
-----------
    To avoid compilation errors like: cannot include ui_editdialog.h
    or linking errors due to missing Qt dependencies run qmake with the
    following syntax:

    qmake -makefile -o Makefile "QT+=widgets" addressbook.pro

    Qt uic tool can be ran manually when nothing else worked with:
    uic editdialog.ui -o ui_editdialog.h

5. The designer
---------------
    The designer is integrated into qtcreator.
    Double click on editdialog.ui (or any .ui) file will open the designer.
    If the .ui file is empty it needs first to be created (see 3).

    Really helpful are 'Vertical Layout', 'Horizontal Layout', 'Form Layout'
    'Vertical Spacer' and obviously all the widgets (Push Button, List Widget).
    Upper toolbar contains 'Edit Widgets' 'Edit Signals/Slots' 'Edit Tab Order'
    On the rigth side there is the Object Inspector which shows
    (a) the form structure and
    (b) helps to edit the object name, the widget's text and much more.

    All connections created from 'Edit Signals/Slots' by drag-and-drop
    will be hidden in the autogenerated files with ui_ prefix.

    All other slots and signals must be connected explicitly.
    See in listdialog.cpp, the ListDialog::ListDialog code for an example.

*
  Chapter 3 - The Python Interpreter.

  Environment Variables
  ---------------------
  PYTHONHOME, PYTHONPATH, PYTHONSTARTUP

  Command-Line Syntax and Options
  -------------------------------
  [path]python {options} [-c command | -m module | file | -] {arguments}

  options:
   -c = python statements in the command line
   -E = ignore all environment variables
   -h = help
   -i = interactive sesison
   -m = module to run as the mains script
   -O = optimizes generated bytecode
   -O0= like -O but removes strings from bytecode
   -Q arg = constrols the behavior of division op. / on integers
   -S = omits implicit import site on startup
   -t = warns about tabs and spaces
   -tt= like -t but gives error instead of warning
   -u = unbuffered binary files for std. output and std. error
   -v = verbose module import and cleanup actions
   -V = prints Python version
   -W arg = adds entry to warning filter
   -x = skip first line of the main script's source.

  Running Python Programs
  -----------------------
  script = afile that can run directly
  module = a file that can be imported

  both can be run directly, but mostly Python files are meant to be imported.

  The Python interpreter automatically compiles Python source files as needed.
  .py   = source files
  .pyc  = compiled bytecode
  .pyo  = optimized bytecode (-O)

  On Unix:
  - make python script executable +x +r
  - add the shebang line to script:
    #!/usr/bin/env python {options}


  On Windows:
  - .py files executed by python.exe  runs normally with GUIs
  - .pyw files executed by pythonw.exe runs in background without standard
    input and output. Scripts must be fully debugged.
  - shebang #!/bin/python does not harm or have any influence in Windows

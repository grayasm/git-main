/*
    Commonly Used Exceptions
    The System namespace defines several standard, built-in exceptions.
    All are derived (either directly or indirectly) from SystemException
    since they are generated by the CLR when runtime errors occur.
    ArrayTypeMismatchException,
    DivideByZeroException,
    IndexOutOfRangeException,
    InvalidCastException,
    OutOfMemoryException,
    OverflowException,
    NullReferenceException

    NullReferenceException. This exception is thrown when there is an
    attempt to use a null reference as if it referred to an objectâ€”for
    example, if you attempt to call a method on a null reference.
*/

using System;

class X
{
    int x;
    public X(int a)
    {
        x = a;
    }

    public int Add(X o)
    {
        return x + o.x;
    }
}


// Demonstrate NullReferenceException.
class NREDemo
{
    static void Main()
    {
        X p = new X(10);
        X q = null; // q is explicitly assigned null
        int val;

        try
        {
            val = p.Add(q); // this will lead to an exception
        } catch (NullReferenceException)
        {
            Console.WriteLine("NullReferenceException!");
            Console.WriteLine("fixing...\n");

            // Now, fix it.
            q = new X(9);
            val = p.Add(q);
        }

        Console.WriteLine("val is {0}", val);
    }
}

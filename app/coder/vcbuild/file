a_z 				= 'a':'z' ;
A_Z 				= 'A':'Z' ;
a_zA_Z 				= a_z | A_Z ;
r0_9 				= '0':'9' ;
exclamation 		= '!' ;
apostrophe 			= '"' ;
hash 				= '#' ;
dolar 				= '$' ;
percent 			= '%' ;
ampersand 			= '&' ;
quotation 			= "'" ;
open_paranthesis 	= '(' ;
close_paranthesis 	= ')' ;
asterisk 			= '*' ;
plus 				= '+' ;
comma 				= ',' ;
minus 				= '-' ;
period 				= '.' ;
slash 				= '/' ;
colon 				= ':' ;
semicolon 			= ';' ;
less 				= '<' ;
equal 				= '=' ;
more 				= '>' ;
question 			= '?' ;
at_sign 			= '@' ;
open_bracket 		= '[' ;
backslash 			= "\\" ;
close_bracket 		= ']' ;
caret 				= '^' ;
underscore 			= '_' ;
acute 				= '`' ;
open_brace 			= '{' ;
pipe 				= '|' ;
close_brace 		= '}' ;
tilde 				= '~' ;


graphic = 
	exclamation
	|	apostrophe
	|	hash
	|	dolar
	|	percent
	|	ampersand
	|	quotation
	|	open_paranthesis
	|	close_paranthesis
	|	asterisk
	|	plus
	|	comma
	|	minus
	|	period
	|	slash
	|	colon
	|	semicolon
	|	less
	|	equal
	|	more
	|	question
	|	at_sign
	|	open_bracket
	|	backslash
	|	close_bracket
	|	caret
	|	underscore
	|	acute
	|	open_brace
	|	pipe
	|	close_brace
	|	tilde;



space 	= ' ' ;
tab 	= "\t" ;
vtab 	= "\v" ;
endl 	= "\n" ;


non_graphic = 
	space 
	|	tab
	|	vtab
	|	endl ;



gap = non_graphic ;
gaps = 0*gap;

all = a_zA_Z 
	|	r0_9	
	|	graphic
	|	non_graphic
	;


comment_begin = open_paranthesis & asterisk;
comment_end = asterisk & close_paranthesis;

(* old version that parses very expensivelly:
	comment_text = 0*all - comment_end; 
*)

double_asterisk = asterisk & asterisk;
t1 = 2*all != comment_end;
pass1 =
	0*(10*all - asterisk) &
	0*(all - asterisk) &
	(
		(!t1 & null) |
		(all & pass1)
	);
comment_text = (pass1);	
comment = comment_begin && comment_text && comment_end;
extra = 0*(gaps && 0*comment && gaps);

	
terminal = (a_zA_Z | underscore) & 0*(a_zA_Z | r0_9 | underscore);

(*		
	terminal->Set(lex::Base::F_BRKSTR);
*)
	



quote1 = quotation & (all != quotation) & quotation;

(*	
	quote1->Set(lex::Base::F_BRKSTR);
*)


	
quote2 = apostrophe & 0*(all != apostrophe) & apostrophe;

(*
		quote2->Set(lex::Base::F_BRKSTR);
*)

	
	
range = quote1 && colon && quote1;

identifier = 
	range || quote1 || quote2 || terminal;


(*	delay for t_ooop	*)


and = ampersand & ampersand;
or = pipe & pipe;


(*	operator at right side of quote1	*)
q1_lop = 
	extra &&	
	quote1 && 
	extra &&
	(and || or || ampersand || pipe);

	
(*	operator at right side of quote2	*)
q2_lop =
	extra &&
	quote2 &&
	extra &&
	(and || or || ampersand || pipe || caret || percent || plus || minus);

	
(*	operator at right side of term	*)
term_lop =
	extra &&
	terminal &&
	extra &&
	(and || or || ampersand || pipe || caret || percent || plus || minus);
			
			
(*	operator at right side of range	*)
range_lop =
	extra &&
	range &&
	extra &&
	(and || or || ampersand || pipe);


repeat_lop = 
	extra &&
	(r0_9 & 0*r0_9) &&
	gaps &&
	asterisk
	;

(* unary operator *)
negation_lop =
	extra &&
	exclamation ;

			
(*	operators allowed by left operand	*)
t_lop =
	q1_lop || q2_lop || term_lop || range_lop || repeat_lop || negation_lop ;

t_rop =
	extra &&
	(and || or || ampersand || pipe || caret || percent || plus || minus) &&
	extra &&
	t_ooop ;

	
t_pop =
	extra &&
	(open_paranthesis 	&& t_ooop && extra	&& close_paranthesis) 	||
	(open_bracket 		&& t_ooop && extra	&& close_bracket) 		||
	(open_brace 		&& t_ooop && extra	&& close_brace) ;
			

t_ooop =
	extra &&
	(0*t_lop	&& extra && identifier	&& extra && 0*t_rop ) ||
	(0*t_lop	&& extra && t_pop		&& extra && 0*t_rop );

operations = t_ooop && extra && semicolon ;

production = 
	extra && 
	terminal && 
	extra && 
	equal &&
	extra &&
	operations;

	
syntax = production || extra ;

(*		
syntax->Set(lex::Base::F_BRKSTR);	
*)

	
digit: one of
    0 1 2 3 4 5 6 7 8 9
	
nondigit: one of
    universal-character-name
    _ a b c d e f g h i j k l m
    n o p q r s t u v w x y z
    A B C D E F G H I J K L M
    N O P Q R S T U V W X Y Z
	
	
identifier:
    nondigit
    identifier nondigit
    identifier digit
	

typedef-name:
    identifier
	
original-namespace-name:
    identifier

namespace-alias:
    identifier
	
namespace-name:
    original-namespace-name
    namespace-alias

template-name:
    identifier

	
nonzero-digit: one of
    1 2 3 4 5 6 7 8 9	
	
decimal-literal:
    nonzero-digit
    decimal-literal digit	

octal-digit: one of
    0 1 2 3 4 5 6 7 

octal-literal:
    0
    octal-literal octal-digit

hexadecimal-digit: one of
    0 1 2 3 4 5 6 7 8 9
    a b c d e f 
    A B C D E F
	
hexadecimal-literal:
    0x hexadecimal-digit
    0X hexadecimal-digit
    hexadecimal-literal hexadecimal-digit	

unsigned-suffix: one of
    u U
	
long-suffix: one of
    l L
	
integer-suffix:
    unsigned-suffix long-suffix[opt]
    long-suffix unsigned-suffix[opt]
	
integer-literal:
    decimal-literal integer-suffix[opt]
    octal-literal integer-suffix[opt]
    hexadecimal-literal integer-suffix[opt]
	

simple-escape-sequence: one of
    \' \" \? \\ \a \b \f \n \r \t \v

octal-escape-sequence:
    \ octal-digit
    \ octal-digit octal-digit
    \ octal-digit octal-digit octal-digit
	
hexadecimal-escape-sequence:
    \x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit	
	
escape-sequence:
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence
	
hex-quad:
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
	
universal-character-name:
    \u hex-quad
    \U hex-quad hex-quad

new-line:
    the new-line character
	
c-char:
    any member of the source character set except the single-quote ', backslash \, or new-line character
    escape-sequence
    universal-character-name

c-char-sequence:
    c-char
    c-char-sequence c-char

character-literal:
    ' c-char-sequence ' 
    L' c-char-sequence ' 

digit-sequence:
    digit
    digit-sequence digit
	
fractional-constant:
    digit-sequence[opt] . digit-sequence 
    digit-sequence . 	

sign: one of
    + -
	
exponent-part:
    e sign[opt] digit-sequence 
    E sign[opt] digit-sequence 

floating-suffix: one of
    f l F L
	
floating-literal:
    fractional-constant exponent-part[opt] floating-suffix[opt]
    digit-sequence exponent-part[opt] floating-suffix[opt]
	
s-char:
    any member of the source character set except the double-quote ", backslash \, or new-line character
    escape-sequence
    universal-character-name

s-char-sequence:
    s-char
    s-char-sequence s-char
	
string-literal:
    " s-char-sequence " 
    L" s-char-sequence " 

boolean-literal:
    false
    true
	
literal:
    integer-literal
    character-literal
    floating-literal
    string-literal
    boolean-literal

this: "this" (exceptie de la regula ;)

expression:
    assignment-expression      #delay 
    expression , assignment-expression
		
operator: one of
    new delete new[] delete[]
    + - * / % ^ & | ~
    ! = < > += -= *= /= %=
    ^= &= |= << >> <<= >>= == !=
    <= >= && || ++ -- , ->* -> 
    () []
	
operator-function-id:
    operator operator

class-key:
    class 
    struct 
    union

cv-qualifier:
    const
    volatile
	
cv-qualifier-seq:
    cv-qualifier cv-qualifier-seq[opt]
	
ptr-operator:
    * cv-qualifier-seq[opt]
    & 
    ::[opt] nested-name-specifier * cv-qualifier-seq[opt]   #nested-name-specifier ->delay
	
conversion-declarator:
    ptr-operator conversion-declarator[opt]
	
conversion-type-id:
    type-specifier-seq conversion-declarator[opt]   #type-specifier-seq ->delay
	
conversion-function-id:
    operator conversion-type-id

class-name:
    identifier
    template-id
	
unqualified-id:
    identifier
    operator-function-id
    conversion-function-id
    ~ class-name	#delay
    template-id		#delay
	
qualified-id:
    ::[opt] nested-name-specifier template[opt] unqualified-id  #delay
    :: identifier
    :: operator-function-id
    :: template-id	#delay
	
id-expression:
    unqualified-id
    qualified-id
	
template-argument:
    assignment-expression 	#delay
    type-id					#delay
    id-expression
	
template-argument-list:
    template-argument
    template-argument-list , template-argument
	
template-id:
    template-name < template-argument-list[opt] > class
	
class-name:
    identifier
    template-id			#delay
	
class-or-namespace-name:
    class-name
    namespace-name
	
nested-name-specifier:
    class-or-namespace-name :: nested-name-specifier[opt]
    class-or-namespace-name :: template nested-name-specifier
	
elaborated-type-specifier:
    class-key ::[opt] nested-name-specifier[opt] identifier
    enum ::[opt] nested-name-specifier[opt] identifier
    typename ::[opt] nested-name-specifier identifier
    typename ::[opt] nested-name-specifier template[opt] template-id

enum-name:
    identifier

typedef-name:
    identifier
	
type-name:
    class-name
    enum-name
    typedef-name
	
simple-type-specifier:
    ::[opt] nested-name-specifier[opt] type-name
    ::[opt] nested-name-specifier template template-id
    char
    wchar_t
    bool
    short
    int
    long
    signed
    unsigned
    float
    double
    void	

storage-class-specifier:
    auto
    register
    static
    extern
    mutable

function-specifier:
    inline
    virtual
    explicit
	
decl-specifier:
    storage-class-specifier
    type-specifier			#delay
    function-specifier
    friend
    typedef

decl-specifier-seq:
    decl-specifier-seq[opt] decl-specifier
	
pure-specifier:
    = 0

declarator-id:
    ::[opt] nested-name-specifier[opt] type-name

abstract-declarator:
    ptr-operator abstract-declarator[opt]
    direct-abstract-declarator			#delay

type-id-list:
    type-id			#delay
    type-id-list , type-id
	
exception-specification:
    throw ( type-id-list[opt] ) 
	
direct-abstract-declarator:
    direct-abstract-declarator[opt][#delay] ( parameter-declaration-clause [#delay]) cv-qualifier-seq[opt] exception-specification[opt]
    direct-abstract-declarator[opt] [ constant-expression[opt] ] 
    ( abstract-declarator ) 

parameter-declaration:
    decl-specifier-seq declarator
    decl-specifier-seq declarator = assignment-expression
    decl-specifier-seq abstract-declarator[opt]
    decl-specifier-seq abstract-declarator[opt] = assignment-expression
	
parameter-declaration-list:
    parameter-declaration
    parameter-declaration-list , parameter-declaration
	
parameter-declaration-clause:
    parameter-declaration-list[opt] ...[opt]
    parameter-declaration-list , ...
	
primary-expression:
    literal
    this
    ( expression [#delay])
    id-expression
	
pseudo-destructor-name:
    ::[opt] nested-name-specifier[opt] type-name :: ~ type-name
    ::[opt] nested-name-specifier template template-id :: ~ type-name
    ::[opt] nested-name-specifier[opt] ~ type-name
	
postfix-expression:
    primary-expression
    postfix-expression [ expression ]
    postfix-expression ( expression-list[opt] )
    simple-type-specifier ( expression-list[opt] )
    typename ::[opt] nested-name-specifier identifier ( expression-list[opt] )
    typename ::[opt] nested-name-specifier template[opt] template-id ( expression-list[opt] )
    postfix-expression . template[opt] id-expression
    postfix-expression -> template[opt] id-expression
    postfix-expression . pseudo-destructor-name
    postfix-expression -> pseudo-destructor-name
    postfix-expression ++ 
    postfix-expression -- 
    dynamic_cast < type-id > ( expression )
    static_cast < type-id > ( expression )
    reinterpret_cast < type-id > ( expression )
    const_cast < type-id > ( expression )
    type-id ( expression )
    type-id ( type-id )
	
unary-operator: one of
    * & + - ! ~ 

cast-expression:
    unary-expression
    ( type-id ) cast-expression
	
delete-expression:
    ::[opt] delete cast-expression
    ::[opt] delete [ ] cast-expression
	
expression-list:
    assignment-expression
    expression-list , assignment-expression

new-placement:
    ( expression-list )

new-initializer:
    ( expression-list[opt] )

direct-new-declarator:
    [ expression ]
    direct-new-declarator [ constant-expression ]
	
new-declarator:
    ptr-operator new-declarator[opt]
    direct-new-declarator
	
new-type-id:
    type-specifier-seq new-declarator[opt]
	
new-expression:
    ::[opt] new new-placement[opt] new-type-id new-initializer[opt]
    ::[opt] new new-placement[opt] ( type-id ) new-initializer[opt]
	
unary-expression:
    postfix-expression
    ++ cast-expression
    -- cast-expression
    unary-operator cast-expression
    sizeof unary-expression
    sizeof ( type-id ) 
    new-expression
    delete-expression
		
pm-expression:
    cast-expression
    pm-expression .* cast-expression
    pm-expression ->* cast-expression

multiplicative-expression:
    pm-expression
    multiplicative-expression * pm-expression
    multiplicative-expression / pm-expression
    multiplicative-expression % pm-expression

additive-expression:
    multiplicative-expression
    additive-expression + multiplicative-expression
    additive-expression - multiplicative-expression

shift-expression:
    additive-expression
    shift-expression << additive-expression
    shift-expression >> additive-expression

relational-expression:
    shift-expression
    relational-expression < shift-expression
    relational-expression > shift-expression
    relational-expression <= shift-expression
    relational-expression >= shift-expression

equality-expression:
    relational-expression
    equality-expression == relational-expression
    equality-expression != relational-expression

and-expression:
    equality-expression
    and-expression & equality-expression

exclusive-or-expression:
    and-expression
    exclusive-or-expression ^ and-expression

inclusive-or-expression:
    exclusive-or-expression
    inclusive-or-expression | exclusive-or-expression

logical-and-expression:
    inclusive-or-expression
    logical-and-expression && inclusive-or-expression
	
logical-or-expression:
    logical-and-expression
    logical-and-expression || logical-or-expression

conditional-expression:
    logical-or-expression
    logical-or-expression ? expression : assignment-expression

throw-expression:
    throw assignment-expression[opt]

#to be moved up
assignment-operator: one of
    = *= /= %= += -= <<= >>= &= ^= |=
	
assignment-expression:
    conditional-expression
    logical-or-expression assignment-operator assignment-expression
    throw-expression
	
constant-expression:
    conditional-expression
	
direct-declarator:
    declarator-id
    direct-declarator ( parameter-declaration-clause ) cv-qualifier-seq[opt] exception-specification[opt]
    direct-declarator [ constant-expression[opt] ] 
    ( declarator ) 
	
declarator:
    direct-declarator
    ptr-operator declarator

constant-initializer:
    = constant-expression
	
member-declarator:
    declarator pure-specifier[opt]
    declarator constant-initializer[opt]
    identifier[opt] : constant-expression
	
member-declarator-list:
    member-declarator
    member-declarator-list , member-declarator
	
member-declaration:
    decl-specifier-seq[opt] member-declarator-list[opt] ; 
    function-definition ;[opt]
    ::[opt] nested-name-specifier template[opt] unqualified-id ; 
    using-declaration
    template-declaration
	
member-specification:
    member-declaration member-specification[opt]
    access-specifier : member-specification[opt]

access-specifier:
    private
    protected
    public
	
base-specifier:
    ::[opt] nested-name-specifier[opt] class-name
    virtual access-specifier[opt] ::[opt] nested-name-specifier[opt] class-name
    access-specifier[opt] virtual[opt] ::[opt] nested-name-specifier[opt] class-name
	
base-specifier-list:
    base-specifier
    base-specifier-list , base-specifier

base-clause:
    : base-specifier-list
	
class-head:
    class-key identifier[opt] base-clause[opt]
    class-key nested-name-specifier[opt] identifier base-clause[opt]
    class-key nested-name-specifier[opt] template-id base-clause[opt]
	
class-specifier:
    class-head { member-specification[opt] } 

enumerator:
    identifier
	
enumerator-definition:
    enumerator
    enumerator = constant-expression
	
enumerator-list:
    enumerator-definition
    enumerator-list , enumerator-definition
	
enum-specifier:
    enum identifier[opt] { enumerator-list[opt] }
	
type-specifier:
    simple-type-specifier
    class-specifier
    enum-specifier
    elaborated-type-specifier
    cv-qualifier
	
type-specifier-seq:
    type-specifier type-specifier-seq[opt]
	
type-id:
    type-specifier-seq abstract-declarator[opt]

	
h-char:
    any member of the source character set except new-line and >
	
h-char-sequence:
    h-char
    h-char-sequence h-char

q-char:
    any member of the source character set except new-line and "
	
q-char-sequence:
    q-char
    q-char-sequence q-char
	
header-name:
    < h-char-sequence >
    " q-char-sequence "

pp-number:
    digit
    . digit
    pp-number digit
    pp-number nondigit
    pp-number e sign
    pp-number E sign
    pp-number . 

preprocessing-op-or-punc: one of
    { } [ ] # ## ( )
    <: :> <% %> %: %:%: ; : ...
    new delete ? :: . .*
    + - * / % ^ & | _
    ! = < > += -= *= /= %=
    ^= &= |= << >> <<= >>= == !=
    <= >= && || ++ -- , ->* -> 
    and and_eq bitand bitor compl not not_eq
    or or_eq xor xor_eq
	
preprocessing-token:
    header-name
    identifier
    pp-number
    character-literal
    string-literal
    preprocessing-op-or-punc
    each non-white-space character that cannot be one of the above

token:
    identifier
    keyword
    literal
    operator
    punctuator


labeled-statement:
    identifier : statement
    case constant-expression : statement
    default : statement

expression-statement:
    expression[opt] ; 

compound-statement:
    { statement-seq[opt] } 

statement-seq:
    statement
    statement-seq statement

selection-statement:
    if ( condition ) statement
    if ( condition ) statement else statement
    switch ( condition ) statement

condition:
    expression
    type-specifier-seq declarator = assignment-expression

iteration-statement:
    while ( condition ) statement
    do statement while ( expression ) ; 
    for ( for-init-statement condition[opt] ; expression[opt] ) statement

for-init-statement:
    expression-statement
    simple-declaration

jump-statement:
    break ;
    continue ;
    return expression[opt] ; 
    goto identifier ; 

declaration-statement:
    block-declaration

exception-declaration:
    type-specifier-seq declarator
    type-specifier-seq abstract-declarator
    type-specifier-seq
    ... 
	
handler:
    catch { exception-declaration } compound-statement
	
handler-seq:
    handler handler-seq[opt]
	
try-block:
    try compound-statement handler-seq
	
statement:
    labeled-statement
    expression-statement
    compound-statement
    selection-statement
    iteration-statement
    jump-statement
    declaration-statement
    try-block	

initializer-list:
    initializer-clause
    initializer-list , initializer-clause	
	
initializer-clause:
    assignment-expression
    { initializer-list ,[opt] } 
    { } 
	
initializer:
    = initializer-clause ( expression-list ) 
	
init-declarator:
    declarator initializer[opt]
	
init-declarator-list:
    init-declarator
    init-declarator-list init-declarator
	
simple-declaration:
    decl-specifier-seq[opt] init-declarator-list[opt] ;	

asm-definition:
    asm { string-literal } 

qualified-namespace-specifier:
    ::[opt] nested-name-specifier[opt] namespace-name
	
namespace-alias-definition:
    namespace identifier = qualified-namespace-specifier ; 

using-declaration:
    using typename[opt] ::[opt] nested-name-specifier unqualified-id ; 
    using :: unqualified-id ;

using-directive:
    using namespace ::[opt] nested-name-specifier[opt] namespace-name ; 
	
block-declaration:
    simple-declaration
    asm-definition
    namespace-alias-definition
    using-declaration
    using-directive

mem-initializer-id:
    ::[opt] nested-name-specifier[opt] class-name
    identifier
	
mem-initializer:
    mem-initializer-id { expression-list[opt] } 
	
mem-initializer-list:
    mem-initializer
    mem-initializer-list , mem-initializer
	
ctor-initializer:
    : mem-initializer-list

function-body:
    compound-statement
	
function-try-block:
    try ctor-initializer[opt] function-body handler-seq
	
function-definition:
    decl-specifier-seq[opt] declarator ctor-initializer[opt] function-body
    decl-specifier-seq[opt] declarator function-try-block

type-parameter:
    class identifier[opt]
    class identifier[opt] = type-id
    typename identifier[opt]
    typename identifier[opt] = type-id
    template < template-parameter-list > class identifier[opt]
    template < template-parameter-list > class identifier[opt] = id-expression
	
template-parameter:
    type-parameter
    parameter-declaration	

template-parameter-list:
    template-parameter
    template-parameter-list , template-parameter
	
template-declaration:
    export[opt] template < template-parameter-list > declaration

explicit-instantiation:
    template declaration

explicit-specialization:
    template < > declaration
	
linkage-specification:
    extern string-literal { declaration-seq[opt] } 
    extern string-literal declaration
	
namespace-body:
    declaration-seq[opt]	
	
original-namespace-definition:
    namespace identifier { namespace-body } 
	
extension-namespace-definition:
    namespace original-namespace-name { namespace-body }
	
named-namespace-definition:
    original-namespace-definition
    extension-namespace-definition
	
unnamed-namespace-definition:
    namespace { namespace-body } 

namespace-definition:
    named-namespace-definition
    unnamed-namespace-definition
	
declaration:
    block-declaration
    function-definition
    template-declaration
    explicit-instantiation
    explicit-specialization
    linkage-specification
    namespace-definition
	
declaration-seq:
    declaration
    declaration-seq declaration
	
translation-unit:
    declaration-seq[opt]


	





	

	




 
 



	
	
	
	
	
	
	
	
#PREPROCESSOR	to be moved up (at the top almost)
if-group:
    # if constant-expression new-line group[opt]
    # ifdef identifier new-line group[opt]
    # ifndef identifier new-line group[opt]

else-group:
    # else new-line group[opt]

elif-group:
    # elif constant-expression new-line group[opt]
	
elif-groups:
    elif-group
    elif-groups elif-group

endif-line:
    # endif new-line
	
if-action:
    if-group elif-groups[opt] else-group[opt] endif-line

replacement-list:
    pp-tokens[opt]

lparen:
    the left-parenthesis character without preceding white-space
	
control-line:
    # include pp-tokens new-line
    # define identifier replacement-list new-line
    # define identifier lparen identifier-list ) replacement-list new-line
    # undef identifier new-line
    # line pp-tokens new-line
    # error pp-tokens[opt] new-line
    # pragma pp-tokens[opt] new-line
    # new-line
	
group-part:
    pp-tokens[opt] new-line
    if-action
    control-line	
	
group:
    group-part
    group group-part

preprocessing-file:
    group[opt]
	
pp-tokens:
    preprocessing-token
    pp-tokens preprocessing-token













	

	

	









	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	